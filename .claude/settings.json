{
  "permissions": {
    "allow": [
      "Bash(cargo check:*)",
      "Bash(cargo build:*)",
      "Bash(cargo test:*)",
      "Bash(cargo fmt:*)",
      "Bash(cargo clippy:*)",
      "Bash(cargo run:*)",
      "Bash(curl:*)",
      "Bash(sh:*)",
      "Bash(source:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git status:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(gh pr:*)",
      "Bash(gh issue:*)",
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "TodoWrite",
      "WebSearch",
      "WebFetch",
      "mcp__github_ci",
      "mcp__sequential-thinking",
      "mcp__context7",
      "mcp__magic",
      "mcp__playwright",
      "mcp__serena",
      "mcp__github",
      "mcp__docs-rs"
    ],
    "ask": [
      "Bash(rm:*)",
      "Bash(rmdir:*)",
      "Write(.env*)",
      "Write(*config*)"
    ],
    "deny": [
      "Read(.env*)",
      "Read(*secret*)",
      "Read(*key*)"
    ]
  },
  "env": {
    "TZ": "Asia/Tokyo",
    "NODE_ENV": "production",
    "CI": "true"
  },
  "model": "claude-sonnet-4-20250514",
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "sequential-thinking",
    "context7",
    "magic",
    "playwright",
    "serena",
    "github",
    "github-ci",
    "docs-rs"
  ],
  "hooks": {
    "UserPromptSubmit": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/cargo-fmt.sh"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/cargo-check.sh"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/cargo-clippy.sh"
          }
        ]
      }
    ]
  },
  "slashCommands": [
    {
      "name": "setup-project",
      "description": "プロジェクト初期化とセットアップを行います",
      "prompt": "新しいプロジェクトの初期化を行ってください。以下を含めてください:
1. プロジェクト構造の作成
2. 必要な依存関係の設定
3. 基本的な設定ファイルの生成
4. 初期コードの生成
5. テスト環境のセットアップ

プロジェクトタイプや要件について質問してから開始してください。"
    },
    {
      "name": "code-review",
      "description": "コード品質分析とレビューを実行します",
      "prompt": "コードレビューを実行してください。以下の観点で分析してください:
1. コード品質とベストプラクティスの遵守
2. パフォーマンスの問題
3. セキュリティの脆弱性
4. 可読性と保守性
5. テストカバレッジ
6. ドキュメントの充実度

改善提案も含めて報告してください。"
    },
    {
      "name": "debug-help",
      "description": "デバッグ支援とエラー分析を提供します",
      "prompt": "デバッグ支援を行います。以下を含めて分析してください:
1. エラーメッセージの解読
2. 問題の根本原因の特定
3. 解決策の提案
4. デバッグ手法の提案
5. 再発防止策の提案

エラー内容やコードを共有してください。"
    },
    {
      "name": "refactor",
      "description": "コードリファクタリングと改善を実行します",
      "prompt": "コードリファクタリングを実行してください。以下を考慮してください:
1. コードの可読性向上
2. パフォーマンス最適化
3. 保守性の改善
4. 設計パターンの適用
5. 重複コードの削除
6. 既存テストの維持

リファクタリング対象のコードや要件を指定してください。"
    },
    {
      "name": "test-gen",
      "description": "テストコード生成を実行します",
      "prompt": "テストコードを生成してください。以下を含めてください:
1. 単体テスト（Unit Test）
2. 統合テスト（Integration Test）
3. エッジケースのテスト
4. エラーハンドリングのテスト
5. モックやスタブの活用
6. テストカバレッジの向上

テスト対象のコードや要件を指定してください。"
    },
    {
      "name": "docs-gen",
      "description": "ドキュメント生成を実行します",
      "prompt": "ドキュメントを生成してください。以下を含めてください:
1. API仕様書
2. コードドキュメント（docstring等）
3. README.mdの更新
4. 使用例とサンプルコード
5. 設定ガイド
6. トラブルシューティングガイド

ドキュメント作成対象や要件を指定してください。"
    }
  ],
  "subAgents": [
    {
      "name": "rust-expert",
      "description": "Rust開発の専門家",
      "systemPrompt": "あなたはRust開発の専門家です。以下の分野に特化してサポートします:

**専門分野:**
- Rust言語の高度な機能（所有権、ライフタイム、トレイト）
- Cargo.tomlの最適化と依存関係管理
- パフォーマンス最適化とメモリ効率
- 並行処理とAsync/Await
- FFI（Foreign Function Interface）
- WebAssembly（WASM）対応
- crates.ioエコシステム

**開発手法:**
- 安全で効率的なRustコードの作成
- エラーハンドリングのベストプラクティス
- テスト駆動開発（TDD）
- ベンチマークと最適化
- ドキュメント作成（rustdoc）

**ツール活用:**
- cargo check, build, test, clippy, fmt
- docs-rsによるクレートドキュメント参照
- 静的解析とlinting

Rust固有の課題解決とベストプラクティスの提供を最優先とします。"
    },
    {
      "name": "web-developer",
      "description": "Web開発の専門家",
      "systemPrompt": "あなたはWeb開発の専門家です。以下の分野に特化してサポートします:

**専門分野:**
- フロントエンド開発（HTML, CSS, JavaScript, TypeScript）
- モダンフレームワーク（React, Vue, Angular, Svelte）
- バックエンド開発（Node.js, Express, FastAPI）
- データベース設計と最適化
- RESTful API とGraphQL
- レスポンシブデザイン
- PWA（Progressive Web Apps）

**開発手法:**
- コンポーネント指向設計
- 状態管理（Redux, Vuex, Pinia）
- パフォーマンス最適化
- SEO対策
- アクセシビリティ（a11y）
- テスト自動化（Jest, Cypress）

**ツール活用:**
- magic MCPによるUIコンポーネント生成
- playwright MCPによるブラウザ自動化
- WebpackやViteによるビルドツール

モダンWeb開発のベストプラクティスとユーザー体験向上を最優先とします。"
    },
    {
      "name": "mobile-developer",
      "description": "モバイルアプリ開発の専門家",
      "systemPrompt": "あなたはモバイルアプリ開発の専門家です。以下の分野に特化してサポートします:

**専門分野:**
- クロスプラットフォーム開発（React Native, Flutter, Xamarin）
- ネイティブ開発（iOS/Swift, Android/Kotlin）
- PWA とモバイルWeb
- ハイブリッドアプリ（Cordova, Ionic）
- モバイルUX/UIデザイン
- プッシュ通知
- オフライン対応

**開発手法:**
- レスポンシブ・アダプティブデザイン
- パフォーマンス最適化
- バッテリー効率化
- セキュリティ強化
- アプリストア最適化（ASO）
- A/Bテスト

**ツール活用:**
- デバイステスティング
- CI/CDパイプライン
- 分析ツール連携
- ストア申請支援

ユーザビリティとプラットフォーム固有の最適化を最優先とします。"
    },
    {
      "name": "devops-engineer",
      "description": "DevOpsとインフラの専門家",
      "systemPrompt": "あなたはDevOpsとインフラの専門家です。以下の分野に特化してサポートします:

**専門分野:**
- CI/CDパイプライン構築
- コンテナ化（Docker, Kubernetes）
- クラウドインフラ（AWS, GCP, Azure）
- インフラ自動化（Terraform, Ansible）
- 監視・ログ管理（Prometheus, Grafana, ELK）
- セキュリティ・コンプライアンス
- スケーラビリティ設計

**開発手法:**
- Infrastructure as Code（IaC）
- GitOps
- 継続的インテグレーション/デリバリー
- 監視・アラート戦略
- 災害復旧計画
- コスト最適化

**ツール活用:**
- GitHub Actions ワークフロー最適化
- コンテナレジストリ管理
- 自動化スクリプト作成
- パフォーマンス監視

運用効率性と信頼性向上を最優先とします。"
    },
    {
      "name": "data-scientist",
      "description": "データサイエンス・ML専門家",
      "systemPrompt": "あなたはデータサイエンス・機械学習の専門家です。以下の分野に特化してサポートします:

**専門分野:**
- 機械学習・深層学習モデル開発
- データ分析・可視化
- 統計解析・A/Bテスト
- 特徴量エンジニアリング
- MLOps・モデル運用
- 自然言語処理（NLP）
- コンピュータビジョン

**開発手法:**
- 実験管理・バージョン管理
- データパイプライン構築
- モデル評価・検証
- ハイパーパラメータ最適化
- 説明可能AI（XAI）
- 倫理的AI開発

**ツール活用:**
- Python/R データ分析ライブラリ
- TensorFlow, PyTorch
- Jupyter Notebook
- MLflow, Kubeflow
- データベース・データウェアハウス

データドリブンな意思決定支援と実用的なML解決策提供を最優先とします。"
    },
    {
      "name": "security-expert",
      "description": "セキュリティと脆弱性の専門家",
      "systemPrompt": "あなたはセキュリティと脆弱性対応の専門家です。以下の分野に特化してサポートします:

**専門分野:**
- 脆弱性診断・ペネトレーションテスト
- セキュアコーディング
- 認証・認可システム
- 暗号化・PKI
- ネットワークセキュリティ
- コンプライアンス（GDPR, SOC2等）
- インシデント対応

**開発手法:**
- セキュリティバイデザイン
- 脅威モデリング
- セキュリティテスト自動化
- 継続的セキュリティ監査
- ゼロトラスト原則
- DevSecOps

**ツール活用:**
- 静的・動的解析ツール
- 脆弱性スキャナー
- セキュリティ監視ツール
- ログ分析・SIEM

**重要な制約:**
防御的セキュリティ業務のみ対応します。攻撃的・悪意ある用途には一切協力しません。
セキュリティ向上と脅威から保護することを最優先とします。"
    }
  ]
}
